#!/usr/bin/env bash
(
  export PATH="$VCW_EXECUTIONPLANE_APIINTERNALPATH_VCW"
  . executionplane-invoke "$0 $@"
  case $1 in
    cmd)
      shift
      executionplane $@
    ;;
    infometis-service)
      shift
      infometis-service $@
    ;;
    load)
      case $2 in
        all)
          console load external;
          console load hub-external;
          console load hub;
        ;;
        external|hub|hub-external)
          cat /vcw/assets/images/${2}-images | while read -r line ; do
        		IFS=' ' read -r -a columns <<< "$line"
            image="${columns[0]}"
            multiArchs="${columns[1]}"
            if [[ "$multiArchs" == "" ]] ; then multiArchs="linux/amd64"; fi
            executionplane-info "$image and $multiArchs"
            executionplane docker image pull ${image}
            executionplane docker tag ${image} ${VCW_REGISTRY}${image}
            if [[ "$(docker buildx ls | grep infometis)" == "" ]] ; then
              executionplane docker image push ${VCW_REGISTRY}${image}
            else
              tmpfile=$(mktemp /tmp/Dockerfile${extension}.XXXXXX)
              echo "FROM ${image}" > $tmpfile
              executionplane docker buildx build --platform "$multiArchs" --push -t ${VCW_REGISTRY}${image} -f $tmpfile .
              rm $tmpfile
            fi
          done
        ;;
        *)
          executionplane docker image pull ${2}
          executionplane docker tag ${2} ${VCW_REGISTRY}${2}
          executionplane docker image push ${VCW_REGISTRY}${2}
        ;;
      esac
    ;;
    multiarch)
      if [[ "$2" == "on" ]] ; then
        if [[ "$(docker buildx ls | grep infometis)" != "" ]] ; then executionplane docker buildx rm infometis ; fi
        executionplane docker buildx create --name infometis
        executionplane docker buildx use infometis
        executionplane docker buildx inspect --bootstrap
        if [[ "${VCW_REGISTRY}" != "" ]] ; then
          BUILDER=$(docker ps | grep buildkitd | cut -f1 -d' ')
          executionplane docker cp /etc/docker/certs.d/${VCW_REGISTRY}/ca.crt $BUILDER:/usr/local/share/ca-certificates/${VCW_REGISTRY::-1}-ca.crt
          executionplane docker exec $BUILDER update-ca-certificates
          executionplane docker restart $BUILDER
        fi
      else
        executionplane docker buildx rm infometis
      fi
    ;;
    reload-infometis)
      if [[ "$2" != "--local" && "$(docker node ls -q | wc -l)" != "1" ]] ; then
        infometis-service console reload-infometis --local
      else
        executionplane docker image pull ${VCW_REGISTRY}hkvb/infometis
      fi
    ;;
    reset)
      echo "" > ${VCW_CURRENT_CONSOLE_SELECTION}
    ;;
    set)
      echo "$2" > "${VCW_CURRENT_CONSOLE_SELECTION}"
      repoNode=$(echo $2 | cut -d"/" -f1)/$(echo ${2} | cut -d"/" -f2)
      if [[ ! -f ./${repoNode}/Dockerfile && "${3}" == "--create" ]] ; then
        executionplane-info "Creating new repository"
        . executionplane-capture-output docker create "${VCW_REGISTRY}hkvb/poc"
        executionplane rm -rf /vcw/pwd/${repoNode}
        executionplane docker container cp ${VCW_EXECUTIONPLANE_OUTPUT}:/vcw/repo/blank/repo /vcw/pwd/${repoNode}
        chmod 755 /vcw/pwd/${repoNode}
      elif [[ ! -f ./${repoNode}/Dockerfile && "${3}" == "--extract" ]] ; then
        if [[ "$4" != "--local" && "$(docker node ls -q | wc -l)" != "1" ]] ; then
  				infometis-service console set "$2" --extract --local
  			else
          executionplane-info "${repoNode}: Repo does not exist.";
          executionplane docker pull ${VCW_REGISTRY}${repoNode};
          . executionplane-capture-output docker create ${VCW_REGISTRY}${repoNode}
      		executionplane mkdir -p /vcw/pwd/${repoNode}
      		executionplane docker container cp ${VCW_EXECUTIONPLANE_OUTPUT}:/vcw/repo/. /vcw/pwd/${repoNode}/
          executionplane chmod -R 777 /vcw/pwd/${repoNode}
        fi
      elif [[ ! -d ./$2 ]] ; then
        mkdir ./${2}
        chmod 755 ./$2
      fi
    ;;
    set-repo-user)
  		executionplane git config --global user.name "${2}"
  		executionplane git config --global user.email "${3}"
      executionplane git config --global core.filemode false
  	;;
    with)
      executionplane-info "console $@"
    ;;
   *)
      executionplane-error "Method not recognised: $1."
    ;;
  esac
  executionplane-complete
)
